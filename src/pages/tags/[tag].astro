---
import { getCollection } from 'astro:content';
import BaseLayout from '../../layouts/BaseLayout.astro';
import { getReadingTime } from '../../utils/readingTime.js';

export async function getStaticPaths() {
  const allPosts = await getCollection('blog');
  
  // Get all unique tags
  const uniqueTags = [...new Set(allPosts.flatMap(post => post.data.tags || []))];
  
  return uniqueTags.map(tag => {
    const filteredPosts = allPosts.filter(post => 
      post.data.tags && post.data.tags.includes(tag)
    );
    
    return {
      params: { tag: tag.toLowerCase().replace(/\s+/g, '-') },
      props: { 
        tag,
        posts: filteredPosts.sort((a, b) => b.data.pubDate.getTime() - a.data.pubDate.getTime())
      }
    };
  });
}

const { tag, posts } = Astro.props;

// Get reading times for all posts
const postsWithReadingTime = await Promise.all(
	posts.map(async (post) => {
		const { body } = await post.render();
		return {
			...post,
			readingTime: getReadingTime(body)
		};
	})
);
---

<BaseLayout pageTitle={`Tag: ${tag}`} description={`Blog posts tagged with "${tag}"`}>
	<h1>Tag: {tag}</h1>
	<p>{posts.length} post{posts.length !== 1 ? 's' : ''} tagged with "{tag}"</p>
	
	<div class="card-grid">
		{postsWithReadingTime.map((post) => (
			<article class="card">
				<div class="card-header">
					<time class="card-date">{post.data.pubDate.toLocaleDateString('en-US', {
						year: 'numeric',
						month: 'long',
						day: 'numeric'
					})}</time>
					<span class="card-reading-time">{post.readingTime} min read</span>
				</div>
				<h2 class="card-title">
					<a href={`/blog/${post.slug}`}>{post.data.title}</a>
				</h2>
				<p class="card-excerpt">{post.data.excerpt}</p>
			</article>
		))}
	</div>
	
	<nav class="tag-nav">
		<a href="/tags">&larr; Back to All Tags</a>
		<span class="separator">|</span>
		<a href="/blog">Back to Blog</a>
	</nav>
</BaseLayout>

<style>
	.card-grid {
		display: grid;
		grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));
		gap: var(--spacing-lg);
		margin-top: var(--spacing-xl);
	}
	
	.card {
		background: var(--color-surface);
		border: 1px solid var(--color-border);
		border-radius: var(--radius-lg);
		padding: var(--spacing-lg);
		transition: all 0.2s;
		display: flex;
		flex-direction: column;
	}
	
	.card:hover {
		transform: translateY(-2px);
		box-shadow: var(--shadow-lg);
		border-color: var(--color-border-hover);
	}
	
	.card-header {
		display: flex;
		justify-content: space-between;
		align-items: center;
		margin-bottom: var(--spacing-sm);
		font-size: var(--font-size-sm);
		color: var(--color-text-tertiary);
	}
	
	.card-date {
		color: var(--color-text-tertiary);
	}
	
	.card-reading-time {
		color: var(--color-text-muted);
	}
	
	.card-title {
		font-size: var(--font-size-xl);
		margin: 0 0 var(--spacing-sm) 0;
		line-height: var(--line-height-tight);
		font-weight: var(--font-weight-semibold);
	}
	
	.card-title a {
		color: var(--color-text-primary);
		text-decoration: none;
		font-weight: var(--font-weight-semibold);
	}
	
	.card-title a:hover {
		color: var(--color-primary);
	}
	
	.card-excerpt {
		color: var(--color-text-secondary);
		line-height: var(--line-height-relaxed);
		margin-bottom: 0;
		flex: 1;
		font-size: var(--font-size-base);
	}
	
	.tag-nav {
		margin-top: var(--spacing-2xl);
		padding-top: var(--spacing-xl);
		border-top: 1px solid var(--color-border);
		display: flex;
		align-items: center;
		gap: var(--spacing-md);
	}
	
	.separator {
		color: var(--color-border);
	}
	
	@media (max-width: 640px) {
		.card-grid {
			grid-template-columns: 1fr;
		}
	}
</style>