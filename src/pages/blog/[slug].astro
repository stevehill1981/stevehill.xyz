---
import { getCollection } from 'astro:content';
import BaseLayout from '../../layouts/BaseLayout.astro';
import { getReadingTime } from '../../utils/readingTime.js';
import { getRelatedPosts } from '../../utils/relatedPosts.js';
import { getSeriesPosts, getSeriesNavigation } from '../../utils/series.js';

export async function getStaticPaths() {
  const blogEntries = await getCollection('blog');
  const sortedEntries = blogEntries.sort((a, b) => b.data.pubDate.getTime() - a.data.pubDate.getTime());
  
  return sortedEntries.map((entry, index) => {
    const prevPost = index < sortedEntries.length - 1 ? sortedEntries[index + 1] : null;
    const nextPost = index > 0 ? sortedEntries[index - 1] : null;
    const relatedPosts = getRelatedPosts(entry, sortedEntries, 3);
    
    // Series functionality
    const seriesPosts = getSeriesPosts(entry, sortedEntries);
    const seriesNavigation = getSeriesNavigation(entry, seriesPosts);
    
    return {
      params: { slug: entry.slug }, 
      props: { entry, prevPost, nextPost, relatedPosts, seriesNavigation },
    };
  });
}

const { entry, prevPost, nextPost, relatedPosts, seriesNavigation } = Astro.props;
const { Content, body } = await entry.render();
const readingTime = getReadingTime(body);
---

<BaseLayout pageTitle={entry.data.title} description={entry.data.excerpt} type="article">
	<!-- Reading Progress Bar -->
	<div class="reading-progress">
		<div class="reading-progress-bar"></div>
	</div>
	
	<article style="view-transition-name: blog-post;">
		<h1 style="view-transition-name: blog-title;">{entry.data.title}</h1>
		<div class="post-meta">
			Published {entry.data.pubDate.toLocaleDateString('en-US', {
				year: 'numeric',
				month: 'long',
				day: 'numeric'
			})} ‚Ä¢ {readingTime} min read
			<button class="copy-link-btn" title="Copy link to this post">
				<svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
					<path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71"></path>
					<path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.72-1.71"></path>
				</svg>
				<span class="copy-text">Copy Link</span>
				<span class="copied-text">Copied!</span>
			</button>
		</div>
		{entry.data.tags && (
			<div class="tags">
				{entry.data.tags.map((tag) => (
					<a href={`/tags/${tag.toLowerCase().replace(/\s+/g, '-')}`} class="tag">
						{tag}
					</a>
				))}
			</div>
		)}
		
		{seriesNavigation && (
			<div class="series-info">
				<div class="series-header">
					<h3>üìö Part {seriesNavigation.currentPart} of {seriesNavigation.totalParts}: {seriesNavigation.seriesName}</h3>
				</div>
				<div class="series-navigation">
					{seriesNavigation.previousPost && (
						<a href={`/blog/${seriesNavigation.previousPost.slug}`} class="series-nav-link prev">
							<div class="series-nav-direction">‚Üê Previous</div>
							<div class="series-nav-title">Part {seriesNavigation.previousPost.data.series.part}: {seriesNavigation.previousPost.data.title}</div>
						</a>
					)}
					{seriesNavigation.nextPost && (
						<a href={`/blog/${seriesNavigation.nextPost.slug}`} class="series-nav-link next">
							<div class="series-nav-direction">Next ‚Üí</div>
							<div class="series-nav-title">Part {seriesNavigation.nextPost.data.series.part}: {seriesNavigation.nextPost.data.title}</div>
						</a>
					)}
				</div>
				
				<details class="series-index">
					<summary>View all parts in this series</summary>
					<ol class="series-list">
						{seriesNavigation.allPosts.map((post) => (
							<li class="series-item" class:list={[{ 'current': post.slug === entry.slug }]}>
								{post.slug === entry.slug ? (
									<span class="series-current">
										<strong>Part {post.data.series.part}: {post.data.title}</strong>
										<span class="current-indicator">(You are here)</span>
									</span>
								) : (
									<a href={`/blog/${post.slug}`} class="series-link">
										Part {post.data.series.part}: {post.data.title}
									</a>
								)}
							</li>
						))}
					</ol>
				</details>
			</div>
		)}
		
		<div class="content-wrapper">
			<!-- Table of Contents (will be populated by JavaScript) -->
			<aside class="table-of-contents" id="toc">
				<div class="toc-header">
					<h3>Table of Contents</h3>
					<button class="toc-toggle" aria-label="Toggle table of contents">
						<svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
							<polyline points="6,9 12,15 18,9"></polyline>
						</svg>
					</button>
				</div>
				<nav class="toc-nav">
					<ul class="toc-list"></ul>
				</nav>
			</aside>
			
			<div class="content">
				<Content />
			</div>
		</div>
		
		{relatedPosts && relatedPosts.length > 0 && (
			<section class="related-posts">
				<h2>You might also like</h2>
				<div class="related-posts-grid">
					{relatedPosts.map(async (relatedPost) => {
						const { body: relatedBody } = await relatedPost.render();
						const relatedReadingTime = getReadingTime(relatedBody);
						
						return (
							<article class="related-post-card">
								<div class="related-post-meta">
									<time>{relatedPost.data.pubDate.toLocaleDateString('en-US', { 
										year: 'numeric', 
										month: 'short', 
										day: 'numeric' 
									})}</time>
									<span class="reading-time">{relatedReadingTime} min read</span>
								</div>
								<h3 class="related-post-title">
									<a href={`/blog/${relatedPost.slug}`}>{relatedPost.data.title}</a>
								</h3>
								<p class="related-post-excerpt">{relatedPost.data.excerpt}</p>
								{relatedPost.data.tags && (
									<div class="related-post-tags">
										{relatedPost.data.tags.slice(0, 3).map((tag) => (
											<span class="tag-small">{tag}</span>
										))}
									</div>
								)}
							</article>
						);
					})}
				</div>
			</section>
		)}
		
		<nav class="post-navigation">
			<div class="nav-section">
				{prevPost && (
					<a href={`/blog/${prevPost.slug}`} class="nav-link prev-post">
						<div class="nav-direction">‚Üê Previous</div>
						<div class="nav-title">{prevPost.data.title}</div>
					</a>
				)}
			</div>
			
			<div class="nav-center">
				<a href="/blog" class="back-to-blog">Back to Blog</a>
			</div>
			
			<div class="nav-section">
				{nextPost && (
					<a href={`/blog/${nextPost.slug}`} class="nav-link next-post">
						<div class="nav-direction">Next ‚Üí</div>
						<div class="nav-title">{nextPost.data.title}</div>
					</a>
				)}
			</div>
		</nav>
	</article>
</BaseLayout>

<script>
  import { enhanceCodeBlocks } from '../../scripts/enhance-code-blocks.js';
  
  document.addEventListener('DOMContentLoaded', () => {
    enhanceCodeBlocks();
    
    // Reading progress bar functionality
    const progressBar = document.querySelector('.reading-progress-bar');
    const article = document.querySelector('article');
    
    if (progressBar && article) {
      function updateProgress() {
        const articleRect = article.getBoundingClientRect();
        const articleTop = articleRect.top + window.scrollY;
        const articleHeight = articleRect.height;
        const viewportHeight = window.innerHeight;
        const scrollTop = window.scrollY;
        
        // Calculate progress based on article position
        const articleStart = articleTop - viewportHeight * 0.2; // Start when article is 20% into viewport
        const articleEnd = articleTop + articleHeight - viewportHeight * 0.8; // End when 80% through
        
        const totalScrollableArea = articleEnd - articleStart;
        const currentScroll = scrollTop - articleStart;
        
        let progress = 0;
        if (totalScrollableArea > 0) {
          progress = Math.max(0, Math.min(100, (currentScroll / totalScrollableArea) * 100));
        }
        
        progressBar.style.width = `${progress}%`;
        
        // Show/hide progress bar based on article visibility
        if (scrollTop > articleStart && scrollTop < articleEnd + viewportHeight) {
          progressBar.parentElement.classList.add('visible');
        } else {
          progressBar.parentElement.classList.remove('visible');
        }
      }
      
      // Initial update
      updateProgress();
      
      // Update on scroll with throttling
      let ticking = false;
      window.addEventListener('scroll', () => {
        if (!ticking) {
          requestAnimationFrame(() => {
            updateProgress();
            ticking = false;
          });
          ticking = true;
        }
      });
      
      // Update on resize
      window.addEventListener('resize', updateProgress);
    }
    
    // Copy link functionality
    const copyLinkBtn = document.querySelector('.copy-link-btn');
    if (copyLinkBtn) {
      copyLinkBtn.addEventListener('click', async () => {
        try {
          await navigator.clipboard.writeText(window.location.href);
          
          // Show copied state
          copyLinkBtn.classList.add('copied');
          
          // Reset after 2 seconds
          setTimeout(() => {
            copyLinkBtn.classList.remove('copied');
          }, 2000);
        } catch (err) {
          // Fallback for browsers that don't support clipboard API
          const textArea = document.createElement('textarea');
          textArea.value = window.location.href;
          document.body.appendChild(textArea);
          textArea.focus();
          textArea.select();
          
          try {
            document.execCommand('copy');
            copyLinkBtn.classList.add('copied');
            setTimeout(() => {
              copyLinkBtn.classList.remove('copied');
            }, 2000);
          } catch (fallbackErr) {
            console.error('Failed to copy link:', fallbackErr);
          }
          
          document.body.removeChild(textArea);
        }
      });
    }
    
    // Table of Contents functionality
    function generateTableOfContents() {
      const toc = document.getElementById('toc');
      const tocList = document.querySelector('.toc-list');
      const content = document.querySelector('.content');
      
      if (!toc || !tocList || !content) return;
      
      // Find all headings in the content
      const headings = content.querySelectorAll('h2, h3, h4, h5, h6');
      
      if (headings.length === 0) {
        toc.style.display = 'none';
        return;
      }
      
      // Generate unique IDs for headings and build TOC
      const tocItems = [];
      headings.forEach((heading, index) => {
        const id = heading.id || `heading-${index}`;
        heading.id = id;
        
        const level = parseInt(heading.tagName.charAt(1));
        const text = heading.textContent.trim();
        
        tocItems.push({ id, text, level });
      });
      
      // Build the TOC HTML
      let tocHTML = '';
      let currentLevel = 2;
      
      tocItems.forEach((item, index) => {
        const { id, text, level } = item;
        
        if (level > currentLevel) {
          // Open nested list
          tocHTML += '<ul class="toc-nested">';
        } else if (level < currentLevel) {
          // Close nested lists
          const levelDiff = currentLevel - level;
          tocHTML += '</ul>'.repeat(levelDiff);
        }
        
        tocHTML += `
          <li class="toc-item toc-level-${level}">
            <a href="#${id}" class="toc-link" data-heading="${id}">
              ${text}
            </a>
          </li>
        `;
        
        currentLevel = level;
      });
      
      tocList.innerHTML = tocHTML;
      
      // Add click handlers for smooth scrolling
      const tocLinks = tocList.querySelectorAll('.toc-link');
      tocLinks.forEach(link => {
        link.addEventListener('click', (e) => {
          e.preventDefault();
          const targetId = link.getAttribute('data-heading');
          const targetElement = document.getElementById(targetId);
          
          if (targetElement) {
            const headerHeight = 80; // Account for fixed header
            const elementPosition = targetElement.getBoundingClientRect().top + window.scrollY;
            const offsetPosition = elementPosition - headerHeight;
            
            window.scrollTo({
              top: offsetPosition,
              behavior: 'smooth'
            });
            
            // Update active state
            tocLinks.forEach(l => l.classList.remove('active'));
            link.classList.add('active');
          }
        });
      });
      
      // Highlight current section on scroll
      function updateActiveSection() {
        const headings = Array.from(content.querySelectorAll('h2, h3, h4, h5, h6'));
        const scrollPosition = window.scrollY + 100; // Offset for header
        
        let activeHeading = null;
        
        headings.forEach(heading => {
          const headingTop = heading.getBoundingClientRect().top + window.scrollY;
          if (headingTop <= scrollPosition) {
            activeHeading = heading;
          }
        });
        
        tocLinks.forEach(link => link.classList.remove('active'));
        
        if (activeHeading) {
          const activeLink = tocList.querySelector(`[data-heading="${activeHeading.id}"]`);
          if (activeLink) {
            activeLink.classList.add('active');
          }
        }
      }
      
      // Update active section on scroll (throttled)
      let scrollTicking = false;
      window.addEventListener('scroll', () => {
        if (!scrollTicking) {
          requestAnimationFrame(() => {
            updateActiveSection();
            scrollTicking = false;
          });
          scrollTicking = true;
        }
      });
      
      // Initial active section update
      updateActiveSection();
    }
    
    // TOC toggle functionality
    const tocToggle = document.querySelector('.toc-toggle');
    const tocNav = document.querySelector('.toc-nav');
    
    if (tocToggle && tocNav) {
      tocToggle.addEventListener('click', () => {
        const isExpanded = tocNav.classList.contains('expanded');
        
        if (isExpanded) {
          tocNav.classList.remove('expanded');
          tocToggle.setAttribute('aria-expanded', 'false');
        } else {
          tocNav.classList.add('expanded');
          tocToggle.setAttribute('aria-expanded', 'true');
        }
      });
    }
    
    // Generate TOC after content is loaded
    generateTableOfContents();
  });
</script>

<style>
	/* Reading Progress Bar */
	.reading-progress {
		position: fixed;
		top: 0;
		left: 0;
		width: 100%;
		height: 3px;
		background: var(--color-bg-tertiary);
		z-index: 1000;
		opacity: 0;
		visibility: hidden;
		transition: opacity var(--transition-fast), visibility var(--transition-fast);
	}
	
	.reading-progress.visible {
		opacity: 1;
		visibility: visible;
	}
	
	.reading-progress-bar {
		height: 100%;
		background: linear-gradient(90deg, var(--color-primary), var(--color-accent));
		width: 0%;
		transition: width var(--transition-fast);
		box-shadow: 0 0 10px rgba(59, 130, 246, 0.3);
	}
	
	[data-theme="dark"] .reading-progress-bar {
		box-shadow: 0 0 10px rgba(96, 165, 250, 0.4);
	}
	
	/* Copy Link Button */
	.copy-link-btn {
		display: inline-flex;
		align-items: center;
		gap: var(--spacing-xs);
		background: transparent;
		border: 1px solid var(--color-border);
		color: var(--color-text-secondary);
		padding: 0.25rem 0.75rem;
		border-radius: var(--radius-md);
		font-size: var(--font-size-sm);
		font-weight: var(--font-weight-medium);
		cursor: pointer;
		transition: all var(--transition-fast);
		margin-left: var(--spacing-md);
		font-family: inherit;
		position: relative;
		overflow: hidden;
	}
	
	.copy-link-btn:hover {
		background: var(--color-bg-tertiary);
		border-color: var(--color-border-hover);
		color: var(--color-text-primary);
		transform: translateY(-1px);
	}
	
	.copy-link-btn:active {
		transform: translateY(0);
	}
	
	.copy-link-btn.copied {
		background: var(--color-success);
		border-color: var(--color-success);
		color: white;
	}
	
	.copy-link-btn svg {
		transition: transform var(--transition-fast);
	}
	
	.copy-link-btn:hover svg {
		transform: scale(1.1);
	}
	
	.copied-text {
		display: none;
	}
	
	.copy-link-btn.copied .copy-text {
		display: none;
	}
	
	.copy-link-btn.copied .copied-text {
		display: inline;
	}
	
	@media (max-width: 640px) {
		.copy-link-btn {
			margin-left: 0;
			margin-top: var(--spacing-xs);
		}
		
		.post-meta {
			flex-direction: column;
			align-items: flex-start;
		}
	}
	
	/* Content Layout with TOC */
	.content-wrapper {
		position: relative;
		display: grid;
		grid-template-columns: 1fr;
		gap: var(--spacing-xl);
		margin-top: 2rem;
	}
	
	@media (min-width: 1200px) {
		.content-wrapper {
			grid-template-columns: 250px 1fr;
			gap: var(--spacing-2xl);
		}
	}
	
	/* Table of Contents */
	.table-of-contents {
		background: var(--color-surface);
		border: 1px solid var(--color-border);
		border-radius: var(--radius-lg);
		padding: var(--spacing-lg);
		position: sticky;
		top: 100px;
		height: fit-content;
		max-height: calc(100vh - 120px);
		overflow-y: auto;
		order: 2;
	}
	
	@media (min-width: 1200px) {
		.table-of-contents {
			order: 1;
		}
	}
	
	.toc-header {
		display: flex;
		align-items: center;
		justify-content: space-between;
		margin-bottom: var(--spacing-md);
		padding-bottom: var(--spacing-sm);
		border-bottom: 1px solid var(--color-border);
	}
	
	.toc-header h3 {
		font-size: var(--font-size-lg);
		font-weight: var(--font-weight-semibold);
		color: var(--color-text-primary);
		margin: 0;
	}
	
	.toc-toggle {
		display: none;
		background: transparent;
		border: none;
		color: var(--color-text-secondary);
		cursor: pointer;
		padding: 0.25rem;
		border-radius: var(--radius-sm);
		transition: all var(--transition-fast);
	}
	
	.toc-toggle:hover {
		background: var(--color-bg-tertiary);
		color: var(--color-text-primary);
	}
	
	.toc-toggle svg {
		transition: transform var(--transition-fast);
	}
	
	.toc-nav.expanded .toc-toggle svg {
		transform: rotate(180deg);
	}
	
	@media (max-width: 1199px) {
		.toc-toggle {
			display: block;
		}
		
		.toc-nav {
			display: none;
		}
		
		.toc-nav.expanded {
			display: block;
		}
	}
	
	.toc-list {
		list-style: none;
		padding: 0;
		margin: 0;
	}
	
	.toc-nested {
		list-style: none;
		padding-left: var(--spacing-md);
		margin: var(--spacing-xs) 0;
	}
	
	.toc-item {
		margin-bottom: var(--spacing-xs);
	}
	
	.toc-link {
		display: block;
		color: var(--color-text-secondary);
		text-decoration: none;
		padding: 0.375rem 0.5rem;
		border-radius: var(--radius-sm);
		font-size: var(--font-size-sm);
		line-height: var(--line-height-snug);
		transition: all var(--transition-fast);
		border-left: 2px solid transparent;
	}
	
	.toc-link:hover {
		background: var(--color-bg-tertiary);
		color: var(--color-text-primary);
		text-decoration: none;
	}
	
	.toc-link.active {
		background: var(--color-primary-light);
		color: var(--color-primary);
		border-left-color: var(--color-primary);
		font-weight: var(--font-weight-medium);
	}
	
	.toc-level-3 .toc-link {
		font-size: var(--font-size-xs);
		padding-left: var(--spacing-lg);
	}
	
	.toc-level-4 .toc-link,
	.toc-level-5 .toc-link,
	.toc-level-6 .toc-link {
		font-size: var(--font-size-xs);
		padding-left: var(--spacing-xl);
		opacity: 0.8;
	}
	
	/* Hide TOC on smaller screens initially */
	@media (max-width: 1199px) {
		.table-of-contents {
			position: relative;
			top: auto;
			max-height: none;
			order: 1;
			margin-bottom: var(--spacing-lg);
		}
	}
	
	.content {
		order: 1;
	}
	
	@media (min-width: 1200px) {
		.content {
			order: 2;
		}
	}
	
	/* Series Navigation */
	.series-info {
		background: var(--color-surface);
		border: 1px solid var(--color-border);
		border-radius: var(--radius-lg);
		padding: var(--spacing-lg);
		margin: var(--spacing-xl) 0;
		box-shadow: var(--shadow-sm);
	}
	
	.series-header {
		margin-bottom: var(--spacing-lg);
		padding-bottom: var(--spacing-md);
		border-bottom: 1px solid var(--color-border);
	}
	
	.series-header h3 {
		margin: 0;
		font-size: var(--font-size-xl);
		color: var(--color-text-primary);
		font-weight: var(--font-weight-semibold);
	}
	
	.series-navigation {
		display: grid;
		grid-template-columns: 1fr 1fr;
		gap: var(--spacing-md);
		margin-bottom: var(--spacing-lg);
	}
	
	.series-nav-link {
		display: flex;
		flex-direction: column;
		padding: var(--spacing-md);
		background: var(--color-bg-tertiary);
		border: 1px solid var(--color-border);
		border-radius: var(--radius-md);
		text-decoration: none;
		transition: all var(--transition-fast);
		min-height: 80px;
		justify-content: center;
	}
	
	.series-nav-link:hover {
		background: var(--color-primary-light);
		border-color: var(--color-primary);
		transform: translateY(-2px);
		box-shadow: var(--shadow-md);
		text-decoration: none;
	}
	
	.series-nav-link.prev {
		text-align: left;
	}
	
	.series-nav-link.next {
		text-align: right;
	}
	
	.series-nav-direction {
		font-size: var(--font-size-sm);
		font-weight: var(--font-weight-medium);
		color: var(--color-primary);
		margin-bottom: var(--spacing-xs);
	}
	
	.series-nav-title {
		font-size: var(--font-size-base);
		font-weight: var(--font-weight-medium);
		color: var(--color-text-primary);
		line-height: var(--line-height-snug);
		display: -webkit-box;
		-webkit-line-clamp: 2;
		-webkit-box-orient: vertical;
		overflow: hidden;
	}
	
	.series-index {
		border-top: 1px solid var(--color-border);
		padding-top: var(--spacing-md);
	}
	
	.series-index summary {
		font-weight: var(--font-weight-medium);
		color: var(--color-text-primary);
		cursor: pointer;
		padding: var(--spacing-xs);
		border-radius: var(--radius-sm);
		transition: all var(--transition-fast);
		list-style: none;
		position: relative;
		padding-left: var(--spacing-lg);
	}
	
	.series-index summary::-webkit-details-marker {
		display: none;
	}
	
	.series-index summary::before {
		content: '‚ñ∂';
		position: absolute;
		left: 0;
		top: 50%;
		transform: translateY(-50%);
		transition: transform var(--transition-fast);
		color: var(--color-primary);
	}
	
	.series-index[open] summary::before {
		transform: translateY(-50%) rotate(90deg);
	}
	
	.series-index summary:hover {
		background: var(--color-bg-tertiary);
	}
	
	.series-list {
		margin: var(--spacing-md) 0 0 0;
		padding-left: var(--spacing-lg);
	}
	
	.series-item {
		margin-bottom: var(--spacing-sm);
		padding: var(--spacing-xs) 0;
	}
	
	.series-item.current {
		background: var(--color-primary-light);
		margin: var(--spacing-xs) -var(--spacing-sm);
		padding: var(--spacing-sm);
		border-radius: var(--radius-sm);
		border-left: 3px solid var(--color-primary);
	}
	
	.series-link {
		color: var(--color-text-secondary);
		text-decoration: none;
		font-weight: var(--font-weight-medium);
		transition: color var(--transition-fast);
	}
	
	.series-link:hover {
		color: var(--color-primary);
		text-decoration: none;
	}
	
	.series-current {
		color: var(--color-text-primary);
	}
	
	.current-indicator {
		color: var(--color-primary);
		font-size: var(--font-size-sm);
		font-weight: var(--font-weight-normal);
		margin-left: var(--spacing-xs);
	}
	
	@media (max-width: 640px) {
		.series-navigation {
			grid-template-columns: 1fr;
		}
		
		.series-nav-link.prev,
		.series-nav-link.next {
			text-align: center;
		}
	}
	.content :global(h2) {
		margin-top: var(--spacing-2xl);
		margin-bottom: var(--spacing-md);
	}
	.content :global(h3) {
		margin-top: var(--spacing-xl);
		margin-bottom: var(--spacing-sm);
	}
	.content :global(p) {
		margin-bottom: var(--spacing-lg);
	}
	.content :global(ul),
	.content :global(ol) {
		margin-bottom: var(--spacing-lg);
	}
	.content :global(pre) {
		padding: 1.25rem;
		border-radius: 0.5rem;
		overflow-x: auto;
		margin: var(--spacing-xl) 0;
		font-size: var(--font-size-sm);
		line-height: var(--line-height-relaxed);
	}
	.content :global(:not(pre) > code) {
		background: var(--color-bg-tertiary);
		padding: 0.125rem 0.375rem;
		border-radius: var(--radius-sm);
		font-size: 0.875em;
		font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', 'Consolas', monospace;
		color: var(--color-accent);
		border: 1px solid var(--color-border);
	}
	.content :global(pre code) {
		background: none;
		padding: 0;
		border-radius: 0;
		color: inherit;
		font-size: inherit;
	}
	/* Enhanced code blocks from Shiki */
	.content :global(.astro-code) {
		position: relative;
		padding: 1.25rem;
		font-size: var(--font-size-sm);
		line-height: var(--line-height-relaxed);
	}
	.content :global(.astro-code code) {
		counter-reset: line;
	}
	.content :global(.astro-code .line) {
		display: inline-block;
		width: 100%;
		min-height: 1rem;
	}
	/* Add subtle hover effect for code lines */
	.content :global(.astro-code:hover .line:hover) {
		background-color: rgba(255, 255, 255, 0.05);
		margin-left: -1.25rem;
		margin-right: -1.25rem;
		padding-left: 1.25rem;
		padding-right: 1.25rem;
	}
	.content :global(blockquote) {
		border-left: 4px solid var(--color-primary);
		margin: var(--spacing-lg) 0;
		padding-left: var(--spacing-md);
		color: var(--color-text-secondary);
		font-style: italic;
		background: var(--color-bg-tertiary);
		padding: var(--spacing-md);
		border-radius: var(--radius-md);
	}
	
	/* Enhanced code blocks */
	:global(.enhanced-code-block) {
		position: relative;
		margin: var(--spacing-xl) 0;
		border-radius: var(--radius-lg);
		overflow: hidden;
		background: #0f172a;
		border: 1px solid var(--color-border);
		box-shadow: var(--shadow-md);
	}
	
	:global(.code-toolbar) {
		display: flex;
		justify-content: space-between;
		align-items: center;
		padding: 0.5rem 1rem;
		background: #0f172a;
		border-bottom: 1px solid #1e293b;
	}
	
	:global(.code-lang-label) {
		color: #64748b;
		font-size: var(--font-size-sm);
		font-weight: var(--font-weight-medium);
		text-transform: uppercase;
		letter-spacing: 0.05em;
	}
	
	:global(.code-copy-button) {
		display: flex;
		align-items: center;
		gap: 0.375rem;
		background: transparent;
		border: 1px solid #334155;
		color: #94a3b8;
		padding: 0.25rem 0.75rem;
		border-radius: 0.375rem;
		font-size: var(--font-size-sm);
		font-weight: var(--font-weight-medium);
		cursor: pointer;
		transition: all 0.2s;
		font-family: inherit;
	}
	
	:global(.code-copy-button:hover) {
		background: #1e293b;
		border-color: #475569;
		color: #cbd5e1;
	}
	
	:global(.code-copy-button.copied) {
		background: #10b981;
		border-color: #10b981;
		color: white;
	}
	
	:global(.enhanced-code-block pre) {
		margin: 0 !important;
		border-radius: 0 !important;
	}
	
	/* Related Posts */
	.related-posts {
		margin-top: var(--spacing-2xl);
		padding-top: var(--spacing-2xl);
		border-top: 1px solid var(--color-border);
	}
	
	.related-posts h2 {
		font-size: var(--font-size-2xl);
		margin: 0 0 var(--spacing-lg) 0;
		color: var(--color-text-primary);
		font-weight: var(--font-weight-semibold);
	}
	
	.related-posts-grid {
		display: grid;
		grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
		gap: var(--spacing-lg);
	}
	
	.related-post-card {
		background: var(--color-surface);
		border: 1px solid var(--color-border);
		border-radius: var(--radius-lg);
		padding: var(--spacing-lg);
		transition: all var(--transition-base);
		display: flex;
		flex-direction: column;
	}
	
	.related-post-card:hover {
		transform: translateY(-2px);
		box-shadow: var(--shadow-md);
		border-color: var(--color-border-hover);
	}
	
	.related-post-meta {
		display: flex;
		gap: var(--spacing-sm);
		font-size: var(--font-size-sm);
		color: var(--color-text-tertiary);
		margin-bottom: var(--spacing-sm);
	}
	
	.related-post-meta .reading-time {
		color: var(--color-text-muted);
	}
	
	.related-post-title {
		font-size: var(--font-size-lg);
		margin: 0 0 var(--spacing-sm) 0;
		line-height: var(--line-height-tight);
		font-weight: var(--font-weight-semibold);
	}
	
	.related-post-title a {
		color: var(--color-text-primary);
		text-decoration: none;
	}
	
	.related-post-title a:hover {
		color: var(--color-primary);
	}
	
	.related-post-excerpt {
		color: var(--color-text-secondary);
		line-height: var(--line-height-relaxed);
		font-size: var(--font-size-base);
		flex: 1;
		margin-bottom: var(--spacing-sm);
		display: -webkit-box;
		-webkit-line-clamp: 3;
		-webkit-box-orient: vertical;
		overflow: hidden;
	}
	
	.related-post-tags {
		display: flex;
		flex-wrap: wrap;
		gap: var(--spacing-xs);
		margin-top: auto;
	}
	
	.tag-small {
		background: var(--color-bg-tertiary);
		color: var(--color-text-secondary);
		padding: 0.125rem 0.5rem;
		border-radius: var(--radius-md);
		font-size: var(--font-size-xs);
		font-weight: var(--font-weight-medium);
		border: 1px solid var(--color-border);
	}
	
	@media (max-width: 640px) {
		.related-posts-grid {
			grid-template-columns: 1fr;
		}
	}
	.post-navigation {
		margin-top: var(--spacing-2xl);
		padding-top: var(--spacing-xl);
		border-top: 1px solid var(--color-border);
		display: grid;
		grid-template-columns: 1fr auto 1fr;
		gap: var(--spacing-md);
		align-items: center;
	}
	
	.nav-section {
		display: flex;
	}
	
	.nav-section:last-child {
		justify-content: flex-end;
	}
	
	.nav-link {
		display: flex;
		flex-direction: column;
		text-decoration: none;
		padding: var(--spacing-md);
		border: 1px solid var(--color-border);
		border-radius: var(--radius-lg);
		background: var(--color-surface);
		transition: all var(--transition-base);
		max-width: 250px;
	}
	
	.nav-link:hover {
		border-color: var(--color-border-hover);
		box-shadow: var(--shadow-md);
		transform: translateY(-2px);
		text-decoration: none;
	}
	
	.prev-post:hover {
		transform: translateY(-2px) translateX(-4px);
	}
	
	.next-post:hover {
		transform: translateY(-2px) translateX(4px);
	}
	
	.nav-direction {
		font-size: var(--font-size-sm);
		color: var(--color-text-tertiary);
		font-weight: var(--font-weight-medium);
		margin-bottom: var(--spacing-xs);
	}
	
	.nav-title {
		font-size: var(--font-size-base);
		color: var(--color-text-primary);
		font-weight: var(--font-weight-semibold);
		line-height: var(--line-height-tight);
		overflow: hidden;
		display: -webkit-box;
		-webkit-line-clamp: 2;
		-webkit-box-orient: vertical;
	}
	
	.nav-link:hover .nav-title {
		color: var(--color-primary);
	}
	
	.back-to-blog {
		color: var(--color-primary);
		font-weight: var(--font-weight-medium);
		font-size: var(--font-size-sm);
		text-decoration: none;
		padding: var(--spacing-xs) var(--spacing-md);
		border-radius: var(--radius-md);
		transition: all var(--transition-fast);
		white-space: nowrap;
	}
	
	.back-to-blog:hover {
		background: var(--color-bg-tertiary);
		text-decoration: none;
	}
	
	@media (max-width: 768px) {
		.post-navigation {
			grid-template-columns: 1fr;
			gap: var(--spacing-md);
			text-align: center;
		}
		
		.nav-section {
			justify-content: center;
		}
		
		.nav-section:last-child {
			justify-content: center;
		}
		
		.nav-link {
			max-width: 100%;
		}
	}
</style>